package CLI;
import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Arrays;
import java.util.Scanner;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.zip.ZipOutputStream;

class Parser {
        String commandName;
        String[] args;

        public boolean parse(String input){
            if (input.isEmpty() || input.trim().isEmpty()){
                return false;
            }
            String[] in = input.trim().split(" ");

            commandName = in[0];
            args = new String[in.length - 1];

            for(int i=1; i<in.length;i++){
                args[i-1] = in[i];
            }
            return  true;
        };

        public String getCommandName(){

            return commandName;
        }

        public String[] getArgs(){
            if (args == null){
                return new String[0];
            }

            return args;
        }
;
    }
 class Terminal {

     Parser parser = new Parser();
     Scanner scanner = new Scanner(System.in);
     File current=new File(System.getProperty("user.dir"));

    public String pwd(){
        // code for applying the > operator
//        if(parser.getArgs()[0].equals(">")){
//
//        } else if(parser.getArgs()[0].equals(">>")){
//
//        }
        return current.getAbsolutePath();

    }

    public void cd(String[] args){
        if (args.length == 0){
            current= new File(System.getProperty("user.home"));
        }
        if (args.length == 1){
            if (args[0].equals("..")) {
                current = current.getParentFile()  ;
            }
            else {
                File newD = new File(args[0]);

                if (!newD.isAbsolute()) {
                    newD = new File(current, args[0]);
                }
                if (newD.exists() && newD.isDirectory()) {
                    current=newD;
                }
            }
        }
    }

     public void ls() {

         File[] files = current.listFiles();

         if (files == null || files.length == 0) {
             System.out.println("Directory is empty");
             return;
         }

         Arrays.sort(files, (f1, f2) -> f1.getName().compareToIgnoreCase(f2.getName()));

         for (File file : files) {
             if (file.isDirectory()) {
                 System.out.println("[DIR]  " + file.getName());
             } else {
                 System.out.println("       " + file.getName());
             }
         }
     }


     public void mkdir(String[] args) {
         if (args.length == 0) {
             System.out.println("No directory name provided");
             return;
         }
         for (String arg : args) {
             File newdir = new File(arg);

             if (!newdir.isAbsolute()) {
                 newdir = new File(current, arg);
             }

             if (newdir.mkdirs()) {
                 System.out.println("Directory created: " + newdir.getAbsolutePath());
             }
             else if (newdir.exists()) {
                 System.out.println("Directory already exists: ");
             } else {
                 System.out.println("Failed to create directory: ");
             }
         }
     }

     public void touch(String[] argument) {
    	 if(argument.length==0) {
    		 System.out.println("touch must take 1 argument");
    	 } else if(argument.length>1) {
    		 System.out.println("touch must take only 1 argument");
    	 } else {
    		 Path filepath=current.toPath().resolve(argument[0]);
    		 if(Files.exists(filepath)) {
    			 System.out.println("the file is already existed");
    		 } else {
    			 try {
    				 Files.createFile(filepath);
        			 System.out.println("the file "+argument[0]+" created successfully");
    			 }
    			 catch(IOException e){
    				 System.out.println("Eror during creation");
    			 }
    		 }
    	 }
     }
     
     public void rm(String filename)  {
         Path filePath = current.toPath().resolve(filename);
         if(Files.exists(filePath)) {
        	 try {
        		 Files.deleteIfExists(filePath);
                 System.out.println("File deleted successfully");
        	 }
        	 catch(IOException e) {
        		 System.out.println("Eror during deletion");
        	 }
             
         } else {
             System.out.println("File doesn't exist");
         }
     }

     public void cat(String[] arguments) {
         if(arguments.length==0) {
             System.out.println("There is no any filename");
         } else if (arguments.length>2) {
             System.out.println("cat must take 1 or 2 arguments");
         } else {
             for(String filename:arguments) {
                 Path filepath=current.toPath().resolve(filename);
                 if(!Files.exists(filepath)) {
                     System.out.println("file " + filename + " does not exist");
                     continue;
                 }
                 else {
                     try (BufferedReader br = new BufferedReader(new FileReader(filepath.toFile()))) {
                         String line;
                         while ((line = br.readLine()) != null) {
                             System.out.println(line);
                         }
                     } catch (IOException e) {
                         System.out.println("Error in reading file ");
                     }
                 }
             }
         }
     }

     public void cp(String[] arguments) {
         if(arguments.length!=2) {
             System.out.println("cp must followed by 2 filenames");
         } else {
             File Sourcefile=new File(arguments[0]);
             Path Sourcepath=current.toPath().resolve(arguments[0]).normalize();
             if(Files.exists(Sourcepath)) {
                 File targetfile=new File(arguments[1]);
                 Path targetpath=current.toPath().resolve(arguments[1]).normalize();

                 try (BufferedReader br = Files.newBufferedReader(Sourcepath);
                	  BufferedWriter bw = Files.newBufferedWriter(targetpath)) {

                     String line;
                     while ((line = br.readLine()) != null) {
                         bw.write(line);
                         bw.newLine();
                     }

                 } catch (IOException e) {
                     System.out.println("Error in copy");
                 }

             } else {
                 System.out.println("the source file doesnot exist");
             }
         }
     }


     public void wc(String[] arguments) {
         if(arguments.length == 0) {
             System.out.println("you must put filename");
             return;
         } else if(arguments.length > 1) {
             System.out.println("wc takes  1 argument");
             return;
         }

         String filename = arguments[0];
         Path filepath = current.toPath().resolve(filename);

         if(!Files.exists(filepath)) {
             System.out.println("File does not exist: " + filename);
             return;
         }

         try (BufferedReader br = new BufferedReader(new FileReader(filepath.toFile()))) {
             int lines = 0;
             int words = 0;
             int chars = 0;
             String line;

             while ((line = br.readLine()) != null) {
                 lines++;
                 chars += line.length();


                 if (lines > 1) {
                     chars++;
                 }


                 String trimmed = line.trim();
                 if (!trimmed.isEmpty()) {
                     String[] wordArray = trimmed.split("\\s+");
                     words += wordArray.length;
                 }
             }


             System.out.println(lines + " " + words + " " + chars + " " + filename);

         } catch (IOException e) {
             System.out.println("Error reading file: " + e.getMessage());
         }
     }

     public void zip(String[] arguments) {
         if(arguments.length < 2) {
             System.out.println("zip requires at least 2 arguments: zip file.zip file1 file2");
             return;
         }

         String zipFileName = arguments[0];
         if(!zipFileName.endsWith(".zip")) {
             zipFileName += ".zip";
         }

         Path zipPath = current.toPath().resolve(zipFileName);

         try {
             FileOutputStream fos = new FileOutputStream(zipPath.toFile());
             ZipOutputStream zos = new ZipOutputStream(fos);


             for(int i = 1; i < arguments.length; i++) {
                 Path filePath = current.toPath().resolve(arguments[i]);

                 if(!Files.exists(filePath)) {
                     System.out.println("Warning: File not found - " + arguments[i]);
                     continue;
                 }

                 if(Files.isDirectory(filePath)) {
                     System.out.println("Warning: Skipping directory - " + arguments[i]);
                     continue;
                 }


                 ZipEntry zipEntry = new ZipEntry(arguments[i]);
                 zos.putNextEntry(zipEntry);


                 FileInputStream fis = new FileInputStream(filePath.toFile());
                 byte[] buffer = new byte[1024];
                 int length;
                 while((length = fis.read(buffer)) > 0) {
                     zos.write(buffer, 0, length);
                 }

                 fis.close();
                 zos.closeEntry();
             }

             zos.close();
             fos.close();
             System.out.println("Archive created: " + zipFileName);

         } catch(IOException e) {
             System.out.println("Error creating zip file: " + e.getMessage());
         }
     }
     
     
     public void unzip(String[] arguments) {
         if(arguments.length == 0) {
             System.out.println("unzip requires a zip file");
             return;
         }
         
         Path zipPath = current.toPath().resolve(arguments[0]);
         
         if(!Files.exists(zipPath)) {
             System.out.println("Zip file does not exist");
             return;
         }
         
         
         Path destDir = current.toPath();
         if(arguments.length == 3 && arguments[1].equals("-d")) {
             destDir = current.toPath().resolve(arguments[2]);
         }
         
         try {
             FileInputStream fis = new FileInputStream(zipPath.toFile());
             ZipInputStream zis = new ZipInputStream(fis);
             ZipEntry entry;
             
             
             while((entry = zis.getNextEntry()) != null) {
                 Path filePath = destDir.resolve(entry.getName());
                 
                 if(entry.isDirectory()) {
                     Files.createDirectories(filePath);
                 } else {
                     
                     Files.createDirectories(filePath.getParent());
                     
                     
                     FileOutputStream fos = new FileOutputStream(filePath.toFile());
                     byte[] buffer = new byte[1024];
                     int length;
                     while((length = zis.read(buffer)) > 0) {
                         fos.write(buffer, 0, length);
                     }
                     fos.close();
                 }
                 
                 zis.closeEntry();
             }
             
             zis.close();
             fis.close();
             System.out.println("Archive extracted successfully");
             
         } catch(IOException e) {
             System.out.println("Error extracting zip file: " + e.getMessage());
         }
     }


    public void chooseCommandAction() throws IOException {
        System.out.print("> ");
        String input = scanner.nextLine();

        if (!parser.parse(input)){
            System.out.println("Invalid command");
        }

        if (parser.getCommandName().equals("pwd")){
            System.out.println(pwd());

        } else if (parser.getCommandName().equals("cd")) {
            cd(parser.getArgs());

        } else if (parser.getCommandName().equals("ls")) {
            ls();
        } else if (parser.getCommandName().equals("mkdir")) {
            mkdir(parser.getArgs());
        } else if (parser.getCommandName().equals("rmdir")) {
//            rmdir(parser.getArgs());
        } else if (parser.getCommandName().equals("touch")) {
        	  touch(parser.getArgs());
        } else if (parser.getCommandName().equals("rm")) {
            String[] arguments = parser.getArgs();
            if (arguments.length == 1) {
                rm(arguments[0]);
            } else {
                System.out.println("error in determining the filename");
            }

        }
        else if (parser.getCommandName().equals("cat")) {
            cat(parser.getArgs());

        }
        else if (parser.getCommandName().equals("wc")) {
            wc(parser.getArgs());

        }
        else if (parser.getCommandName().equals("cp")) {
            cp(parser.getArgs());
        }
        else if (parser.getCommandName().equals("zip")) {
            zip(parser.getArgs());
        }
        else if (parser.getCommandName().equals("unzip")) {
           unzip(parser.getArgs());
        }
        else if (parser.getCommandName().equals("exit")){
            System.out.println("Bye");
            System.exit(0);

        }
        else{
            System.out.println("Unknown command: " + parser.commandName);
        }
    }
    public static void main(String[] args) throws IOException {
        Terminal terminal = new Terminal();
        while(true){
            terminal.chooseCommandAction();
        }

    }
}
